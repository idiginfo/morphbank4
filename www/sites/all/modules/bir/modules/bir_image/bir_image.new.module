<?php
/**
 * @file
 * BIR Image module functions.
 */

/**
 * Alter bir image node form.
 */
function bir_image_form_bir_image_node_form_alter(&$form, &$form_state, $form_id) {
  $form['eol'][LANGUAGE_NONE]['#default_value'] = array(0);
  unset($form['eol'][LANGUAGE_NONE]['#options']['_none']);
}

/**
 * Implements hook_node_insert.
 */
function bir_image_node_insert($node) {
  if ($node->type != 'bir_image') {
    return;
  }

  bir_image_process_image_upload($node);

  return;
}

/**
 * Implements hook_node_update().
 */
function bir_image_node_update($node) {
  if ($node->type != 'bir_image') {
    return;
  }

  // Cannot access $ow->field_image->file->fid value it does not exist.
  // An error is thrown, so check by using field_image array.
  $nw = entity_metadata_wrapper('node', $node);
  $ow = entity_metadata_wrapper('node', $node->original);
  $nf = $nw->field_image->value();
  $of = $ow->field_image->value();

  if ($nf['fid'] == $of['fid']) {
    return;
  }

  bir_image_process_image_upload($node);

  return;
}

/**
 * Process uploaded images.
 */
function bir_image_process_image_upload($node) {
  global $base_url;

  $nw = entity_metadata_wrapper('node', $node);

  // Retrieve information for uploaded image file from database.
  $file = file_load($nw->field_image->file->fid->value());

  list($message, $width, $height, $type) = bir_image_process_remote_image($node, $file);
  if (!$width) {
    drupal_set_message($message, 'error');
    return;
  }

  // Fields to update with original image information.
  $nw->original_image_source->set($file->filename);
  $nw->creative_commons->set(variable_get('creative_commons'));
  $nw->image_width->set($width);
  $nw->image_height->set($height);
  $nw->image_type->set($type);
  $nw->identifier->set($nw->uuid->value());
  $nw->standard_image->set($nw);



  // We do not store original image file on app server so delete it.
  file_delete($file, TRUE);

  // We store thumbs locally, so create and update node.
  list($file, $info) = bir_image_create_thumb_file($node);

  if ($info['http_code'] >= 400) {
    drupal_set_message($file, 'error');
    return;
  }

  $nw->field_image->file = $file;
  $nw->save();
  //$node->field_image[LANGUAGE_NONE][0] = (array) $file;
  // Update node fields.
  //field_attach_update('node', $node);

  return;
}

/**
 * Process image on image server.
 */
function bir_image_process_remote_image($node, $file) {
  // Absolute file path.
  $fw = file_stream_wrapper_get_instance_by_uri($file->uri);
  $filepath = $fw->realpath();

  // Get file information.
  $fileinfo = pathinfo($file->uri);

  // New file name.
  $new_file_name = str_replace($fileinfo['filename'], $node->nid, $fileinfo['basename']);

  // Set vars used in curl request
  $curl_vars = array(
  	 'post' => array(
    	 'method' => 'upload',
    	 'id' => $node->nid,
    	 'fileName' => $new_file_name,
    	 'image' => "@$filepath;type=$file->filemime",
    ),
  );

  list($data, $info) = bir_image_curl_request($curl_vars);

  if ($info['http_code'] >= 400) {
    return array($data);
  }

  return explode('^', $data);
}

/**
 * Send request to image server using curl
 */
function bir_image_curl_request($vars) {

  $url = variable_get('image_server_url');
  $url .= isset($vars['get']) ? $vars['get'] : "";
  $header = isset($vars['header']) ? $vars['header'] : array();
  $post = isset($vars['post']) ? TRUE : FALSE;
  $post_fields = isset($vars['post']) ? $vars['post'] : "";
  $binary = isset($vars['binary']) ? TRUE : FALSE;

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_BINARYTRANSFER, $binary);
  curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible;)");
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_POST, $post);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);
  $data = curl_exec($ch);
  $info = curl_getinfo($ch);
  curl_close($ch);

  return array($data, $info);
}

/**
 * Create thumbnail for newly uploaded image.
 *
 * Cannot send request to bir-api because node not saved yet.
 */
function bir_image_create_thumb_file($node) {
  // Set needed variables for thumbnail.
  $image_dir = file_default_scheme();
  $image_file = "{$node->nid}.jpg";
  $image_uri = "$image_dir/$image_file";

  $request = bir_image_get_all_headers();
  $header = isset($request['If-Modified-Since']) ? array($request['If-Modified-Since']) : array();

  // set curl variables
  $curl_vars = array(
    'get' => "/?id={$node->nid}&imgType=thumb",
    'binary' => TRUE,
    'header' => $header,
  );

  list($data, $info) = bir_image_curl_request($curl_vars);

  if ($info['http_code'] >= 400) {
    return array($data, $info);
  }

  file_prepare_directory($image_dir, FILE_CREATE_DIRECTORY);
  file_unmanaged_save_data($data, $image_uri, FILE_EXISTS_REPLACE);

  $file = new stdClass();
  $file->uid = $node->uid;
  $file->filename = $image_file;
  $file->uri = $image_uri;
  $file->filemime = "image/jpeg";
  $file->status = 1;
  $file = file_save($file);

  $image_info = image_get_info($image_uri);
  $file->width = $image_info['width'];
  $file->height = $image_info['height'];

  return array($file, $info);
}

/**
 * Get headers for server.
 */
function bir_image_get_all_headers() {
  if (!function_exists('getallheaders')) {
    return bir_get_headers_custom();
  }
  else {
    return getallheaders();
  }
}

/**
 * Returns request headers.
 */
function bir_get_headers_custom() {
  $headers = array();
  foreach ($_SERVER as $name => $value) {
    if (substr($name, 0, 5) == 'HTTP_') {
      $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;
    }
  }
  return $headers;
}

/**
 * Implements hook_rest_server_response_formatters_alter().
 */
function bir_image_rest_server_response_formatters_alter(&$formatters) {
  $images = array(
    'thumb' => array(
      'mime types' => array('image/jpeg'),
      'formatter class' => 'ServicesThumbFormatter',
    ),
    'jpg' => array(
      'mime types' => array('image/jpeg'),
      'formatter class' => 'ServicesJpgFormatter',
    ),
    'jpeg' => array(
      'mime types' => array('image/jpeg'),
      'formatter class' => 'ServicesJpegFormatter',
    ),
    'tif' => array(
      'mime types' => array('image/tiff', 'image/x-tiff'),
      'formatter class' => 'ServicesTifFormatter',
    ),
    'tiff' => array(
      'mime types' => array('image/tiff', 'image/x-tiff'),
      'formatter class' => 'ServicesTifFormatter',
    ),
    'dng' => array(
      'mime types' => array('application/force-download'),
      'formatter class' => 'ServicesDngFormatter',
    ),
    'bmp' => array(
      'mime types' => array('image/bmp'),
      'formatter class' => 'ServicesBmpFormatter',
    ),
    'gif' => array(
      'mime types' => array('image/gif'),
      'formatter class' => 'ServicesGifFormatter',
    ),
    'png' => array(
      'mime types' => array('image/png'),
      'formatter class' => 'ServicesPngFormatter',
    ),
    'tpc' => array(
      'mime types' => array('application/octet-stream'),
      'formatter class' => 'ServicesTpcFormatter',
    ),
    'iip' => array(
      'mime types' => array('image/tiff', 'image/x-tiff'),
      'formatter class' => 'ServicesTifFormatter',
    ),
  );

  $formatters = array_merge($formatters, $images);

}

/**
 * Function to process images via process images batch.
 */
function bir_image_process_images($nids, $operation_details, &$context) {
  $context['message'] = $operation_details; //Will show what chunk we're on.

  $nodes = entity_load('node', $nids);
  foreach ($nodes as $node) {
    $nw = entity_metadata_wrapper('node', $node);
    $nid = $nw->getIdentifier();
    $fileName = $nw->original_image_source->value();
    $width = $nw->image_width->value();
    $height = $nw->image_height->value();
    $imageType = bir_image_set_type($nw->image_type->value());

    $curl_vars = array(
      'post' => array(
        'method' => 'process',
        'id' => $nid,
        'fileName' => $fileName,
        'imageType' => $imageType,
      ),
    );

    list($data, $info) = bir_image_curl_request($curl_vars);
    list($message, $w, $h) = explode('^', $data);

    if ($info['http_code'] >= 400 || empty($w) || empty($h)) {
      drush_print(dt('Error occured when processing !nid: !message ', array('!nid' => $nid, '!message' => $message)));
    }

    // Update node with new width and height information
    if ($width !== $w || $height !== $h) {
      $nw->image_width->set($w);
      $nw->image_height->set($h);
      $nw->save();
    }
  }
}

/**
 * Function called when process images batch finished.
 */
function bir_image_process_images_finished($success, $results, $operations) {
  //Let the user know we have finished!
  print t('Finished processing!');
}

/**
 * Return file ext type based on mime.
 * Values of $type are set in the database via image upload or image import.
 */
function bir_image_set_type($type) {
  switch ($type) {
    case 'image/dng':
      $ext = 'dng';
      break;
    case 'image/tiff':
      $ext = 'tiff';
      break;
    case 'image/tif':
      $ext = 'tif';
      break;
    case 'image/png';
      $ext = 'png';
      break;
    case 'image/bmp':
      $ext = 'bmp';
      break;
    case 'image/gif':
      $ext = 'gif';
      break;
    default:
      $ext = 'jpg';
  }

  return $ext;
}