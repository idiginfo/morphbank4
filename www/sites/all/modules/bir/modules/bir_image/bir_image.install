<?php
/**
 * @file
 * Installation file for BIR Image.
 */

/**
 * Implements hook_requirements().
 */
function bir_image_requirements($phase) {
  $requirements = array();
  $t = get_t();

  $has_curl = function_exists('curl_init');

  $requirements['bir_image_curl'] = array(
    'title' => $t('cURL'),
    'value' => $has_curl ? $t('Enabled') : $t('Not found'),
  );
  if (!$has_curl) {
    $requirements['bir_image_curl']['severity'] = REQUIREMENT_ERROR;
    $requirements['bir_image_curl']['description'] = $t("BIR Image requires the PHP <a href='!curl_url'>cURL</a> library.", array('!curl_url' => 'http://php.net/manual/en/curl.setup.php'));
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function bir_image_install() {
  _bir_image_create_node_type();
}

/**
 * Implements hook_uninstall().
 */
function bir_image_uninstall() {
  _bir_image_delete_node_type();
}

/**
 * Create image node type.
 */
function _bir_image_create_node_type() {
  // Temporarily enable the node type.
  // See: https://drupal.org/node/943588#comment-4754844.
  db_update('node_type')
    ->fields(array(
      'disabled' => 0,
    ))
    ->condition('type', 'bir_image', '=')
    ->condition('disabled', 1, '=')
    ->execute();

  // Clear the node type cache.
  node_type_cache_reset();

  // Variables to set defaults on forms.
  variable_set('additional_settings__active_tab_bir_image', 'edit-menu');
  variable_set('comment_bir_image', '1');
  variable_set('menu_options_bir_image', array('navigation'));
  variable_set('menu_parent_bir_image', 'navigation:6');
  variable_set('node_options_bir_image', array('status'));
  variable_set('node_preview_bir_image', 0);
  variable_set('node_submitted_bir_image', 0);

  $t = get_t();
  // Define the node type.
  $node = array(
    'type' => 'bir_image',
    'name' => $t('BIR Image'),
    'base' => 'node_content',
    'description' => $t('Image for bir.'),
  );
  $content_type = node_type_set_defaults($node);
  node_type_save($content_type);

  og_create_field(OG_AUDIENCE_FIELD, 'node', 'bir_image');
  og_create_field(OG_CONTENT_ACCESS_FIELD, 'node', 'bir_image');

  // Create entity reference fields.
  _bir_image_create_entity_references();

  // Loop through fields array and create field:instance.
  $field_info = _bir_image_fields_info();
  foreach ($field_info as $key => $field_array) {
    if (!field_info_field($key)) {
      $field_info[$key]['field']['field_name'] = $key;
      field_create_field($field_info[$key]['field']);
    }

    if (!field_info_instance('node', $key, 'bir_image')) {
      $instance = $field_info[$key]['instance'];
      $instance += array(
        'field_name' => $key,
        'bundle' => 'bir_image',
        'entity_type' => 'node',
      );
      field_create_instance($instance);
    }
  }
}

/**
 * Delete the image node type.
 */
function _bir_image_delete_node_type() {
  // Remove all variables defined during install.
  variable_del('additional_settings__active_tab_bir_image');
  variable_del('comment_bir_image');
  variable_del('menu_options_bir_image');
  variable_del('menu_parent_bir_image');
  variable_del('node_options_bir_image');
  variable_del('node_preview_bir_image');
  variable_del('node_submitted_bir_image');

  // Gather all the content created.
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'bir_image'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once.
  node_delete_multiple($nids);

  // Loop over any remaining field instances attached to the node.
  $instances = field_info_instances('node', 'bir_image');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete content type.
  node_type_delete('bir_image');

  // Purge all field infromation.
  field_purge_batch(1000);
}


/**
 * Set up field installation.
 */
function _bir_image_fields_info() {
  $t = get_t();
  return array(
    'field_image' => array(
      'field' => array(
        'label' => $t('Image'),
        'cardinality' => 1,
        'type' => 'file',
        'settings' => array(
          'display_field' => 0,
          'display_default' => 0,
          'uri_scheme' => 'public',
        ),
      ),
      'instance' => array(
        'label' => $t('Image'),
        'cardinality' => 1,
        'type' => 'file',
        'settings' => array(
          'file_directory' => 'bir_thumbs',
          'file_extensions' => 'jpg',
          'description_field' => 0,
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'type' => 'image_image',
          'settings' => array(
            'progress_indicator' => 'throbber',
            'preview_image_style' => 'thumbnail',
          ),
          'weight' => -1,
          'module' => 'image',
        ),
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'type' => 'file_default',
            'weight' => -1,
          ),
        ),
        'required' => TRUE,
      ),
    ),
    'image_height' => array(
      'field' => array(
        'cardinality' => 1,
        'type' => 'number_integer',
      ),
      'instance' => array(
        'label' => $t('Image height'),
        'cardinality' => 1,
        'type' => 'number',
        'widget' => array('type' => 'number'),
        'display' => array('default' => array('type' => 'hidden', 'weight' => 1)),
      ),
    ),
    'image_width' => array(
      'field' => array(
        'cardinality' => 1,
        'type' => 'number_integer',
      ),
      'instance' => array(
        'label' => $t('Image width'),
        'cardinality' => 1,
        'type' => 'number',
        'widget' => array('type' => 'number'),
        'display' => array('default' => array('type' => 'hidden', 'weight' => 2)),
      ),
    ),
    'resolution' => array(
      'field' => array(
        'cardinality' => 1,
        'type' => 'number_integer',
      ),
      'instance' => array(
        'label' => $t('Resolution'),
        'cardinality' => 1,
        'type' => 'number',
        'widget' => array('type' => 'number'),
        'display' => array('default' => array('type' => 'hidden', 'weight' => 3)),
      ),
    ),
    'image_type' => array(
      'field' => array(
        'cardinality' => 1,
        'type' => 'text',
        'settings' => array('max_length' => 10),
      ),
      'instance' => array(
        'label' => $t('Image type'),
        'cardinality' => 1,
        'type' => 'text_textfield',
        'display' => array('default' => array('type' => 'hidden', 'weight' => 4)),
      ),
    ),
    'original_file_name' => array(
      'field' => array(
        'cardinality' => 1,
        'type' => 'text',
        'settings' => array('max_length' => 255),
      ),
      'instance' => array(
        'label' => $t('Original image file name'),
        'cardinality' => 1,
        'type' => 'text_textfield',
        'display' => array('default' => array('type' => 'hidden', 'weight' => 5)),
      ),
    ),
    'creative_commons' => array(
      'field' => array(
        'cardinality' => 1,
        'type' => 'text',
        'settings' => array('max_length' => 255),
      ),
      'instance' => array(
        'label' => $t('Creative commons license'),
        'cardinality' => 1,
        'type' => 'text_textfield',
        'display' => array('default' => array('type' => 'hidden', 'weight' => 6)),
      ),
    ),
    'magnification' => array(
      'field' => array(
        'type' => 'number_float',
        'cardinality' => 1,
        'settings' => array('decimal_separator' => '.'),
      ),
      'instance' => array(
        'label' => $t('Magnification'),
        'required' => FALSE,
        'description' => $t('Enter magnification'),
        'widget' => array('type' => 'number'),
        'display' => array('settings' => array('weight' => 7)),
      ),
    ),
    'photographer' => array(
      'field' => array(
        'cardinality' => 1,
        'type' => 'text',
        'settings' => array('max_length' => 255),
      ),
      'instance' => array(
        'label' => $t('Photographer name'),
        'required' => FALSE,
        'description' => $t('Enter name of photographer'),
        'widget' => array('type' => 'text_textfield'),
        'display' => array('default' => array('weight' => 8)),
      ),
    ),
    'copyright_text' => array(
      'field' => array(
        'cardinality' => 1,
        'type' => 'text',
        'settings' => array('max_length' => 255),
      ),
      'instance' => array(
        'label' => $t('Copyright text'),
        'required' => FALSE,
        'description' => $t('Enter copyright text'),
        'widget' => array('type' => 'text_textfield'),
        'display' => array('settings' => array('weight' => 10)),
      ),
    ),
    'eol' => array(
      'field' => array(
        'cardinality' => 1,
        'type' => 'list_integer',
        'settings' => array(
          'allowed_values' => array(
            1 => $t('Allow'),
            0 => $t('Disallow'),
          ),
          'allowed_values_function' => '',
        ),
      ),
      'instance' => array(
        'label' => $t('EOL'),
        'required' => FALSE,
        'description' => t('Allow image to appear on EOL'),
        'widget' => array('type' => 'options_select'),
        'display' => array('default' => array('weight' => 11)),
      ),
    ),
    'view_title' => array(
      'field' => array(
        'cardinality' => 1,
        'type' => 'text',
        'settings' => array('max_length' => 255),
      ),
      'instance' => array(
        'label' => $t('View Template Title'),
        'required' => FALSE,
        'description' => $t('Title of original view'),
        'widget' => array('type' => 'text_textfield'),
        'display' => array('settings' => array('weight' => 1)),
      ),
    ),
    'imaging_technique' => array(
      'field' => array(
        'type' => 'taxonomy_term_reference',
        'cardinality' => 1,
        'settings' => array(
          'allowed_values' => array(
            array('vocabulary' => 'imaging_technique', 'parent' => 0),
          ),
        ),
      ),
      'instance' => array(
        'label' => $t('Imaging technique'),
        'required' => FALSE,
        'description' => $t('Select imaging technique'),
        'widget' => array('type' => 'options_select'),
        'display' => array('default' => array('weight' => 12)),
      ),
    ),
    'imaging_preparation_technique' => array(
      'field' => array(
        'type' => 'taxonomy_term_reference',
        'cardinality' => 1,
        'settings' => array(
          'allowed_values' => array(
            array('vocabulary' => 'imaging_preparation_technique', 'parent' => 0),
          ),
        ),
      ),
      'instance' => array(
        'label' => $t('Imaging preparation technique'),
        'required' => FALSE,
        'description' => $t('Select imaging preparation technique'),
        'widget' => array('type' => 'options_select'),
        'display' => array('default' => array('weight' => 13)),
      ),
    ),
    'specimen_part' => array(
      'field' => array(
        'type' => 'taxonomy_term_reference',
        'cardinality' => 1,
        'settings' => array(
          'allowed_values' => array(
            array('vocabulary' => 'specimen_part', 'parent' => 0),
          ),
        ),
      ),
      'instance' => array(
        'label' => $t('Specimen part'),
        'required' => FALSE,
        'description' => $t('Select specimen part'),
        'widget' => array('type' => 'options_select'),
        'display' => array('default' => array('weight' => 14)),
      ),
    ),
    'view_angle' => array(
      'field' => array(
        'type' => 'taxonomy_term_reference',
        'cardinality' => 1,
        'settings' => array(
          'allowed_values' => array(
            array('vocabulary' => 'view_angle', 'parent' => 0),
          ),
        ),
      ),
      'instance' => array(
        'label' => $t('View angle'),
        'required' => FALSE,
        'description' => $t('Select view angle'),
        'widget' => array('type' => 'options_select'),
        'display' => array('default' => array('weight' => 15)),
      ),
    ),
    'developmental_stage' => array(
      'field' => array(
        'type' => 'taxonomy_term_reference',
        'cardinality' => 1,
        'settings' => array(
          'allowed_values' => array(
            array('vocabulary' => 'developmental_stage', 'parent' => 0),
          ),
        ),
      ),
      'instance' => array(
        'label' => $t('Developmental stage'),
        'required' => FALSE,
        'description' => $t('Select developmental stage'),
        'widget' => array('type' => 'options_select'),
        'display' => array('default' => array('weight' => 16)),
      ),
    ),
    'sex' => array(
      'field' => array(
        'type' => 'taxonomy_term_reference',
        'cardinality' => 1,
        'settings' => array(
          'allowed_values' => array(
            array('vocabulary' => 'sex', 'parent' => 0),
          ),
        ),
      ),
      'instance' => array(
        'label' => $t('Sex'),
        'required' => FALSE,
        'description' => $t('Select sex'),
        'widget' => array('type' => 'options_select'),
        'display' => array('default' => array('weight' => 17)),
      ),
    ),
    'form' => array(
      'field' => array(
        'type' => 'taxonomy_term_reference',
        'cardinality' => 1,
        'settings' => array(
          'allowed_values' => array(
            array('vocabulary' => 'form', 'parent' => 0),
          ),
        ),
      ),
      'instance' => array(
        'label' => $t('Form'),
        'required' => FALSE,
        'description' => $t('Select form'),
        'widget' => array('type' => 'options_select'),
        'display' => array('default' => array('weight' => 18)),
      ),
    ),
    'furi' => array(
      'field' => array(
        'cardinality' => 1,
        'type' => 'text',
        'settings' => array('max_length' => 255),
      ),
      'instance' => array(
        'label' => $t('Foreign object URI'),
        'cardinality' => 1,
        'type' => 'text_textfield',
        'display' => array('default' => array('type' => 'hidden', 'weight' => 19)),
      ),
    ),
    'image_count' => array(
      'field' => array(
        'cardinality' => 1,
        'type' => 'number_integer',
      ),
      'instance' => array(
        'label' => $t('Image count'),
        'cardinality' => 1,
        'type' => 'number',
        'widget' => array('type' => 'number'),
        'display' => array('default' => array('type' => 'hidden', 'weight' => 22)),
      ),
    ),
  );
}

/**
 * Create entity reference fields.
 */
function _bir_image_create_entity_references() {
  $t = get_t();

  $entityreference_fields = array(
    array(
      'field_name' => 'contributor',
      'label' => $t('Contributor'),
      'type' => 'entityreference',
      'module' => 'entityreference',
      'entity_types' => array(),
      'foreign keys' => array(
        'users' => array(
          'table' => 'users',
          'columns' => array(
            'target_id' => 'uid',
          ),
        ),
      ),
      'indexes' => array(
        'target_entity' => array(
          '0' => 'target_id',
        ),
        'target_id' => array(
          '0' => 'target_id',
        ),
      ),
      'settings' => array(
        'handler_settings' => array(
          'target_bundles' => array(),
        ),
        'handler_submit' => 'Change handler',
        'target_type' => 'user',
      ),
      'translatable' => 0,
    ),
    array(
      'field_name' => 'specimen_id',
      'label' => $t('Specimen Id'),
      'type' => 'entityreference',
      'module' => 'entityreference',
      'entity_types' => array(),
      'foreign keys' => array(
        'node' => array(
          'table' => 'node',
          'columns' => array(
            'target_id' => 'nid',
          ),
        ),
      ),
      'indexes' => array(
        'target_entity' => array(
          '0' => 'target_id',
        ),
        'target_id' => array(
          '0' => 'target_id',
        ),
      ),
      'settings' => array(
        'handler_settings' => array(
          'target_bundles' => array('bir_specimen' => 'bir_specimen'),
        ),
        'handler_submit' => 'Change handler',
        'target_type' => 'node',
      ),
      'translatable' => 0,
    ),
    array(
      'field_name' => 'view_id',
      'label' => $t('View Id'),
      'type' => 'entityreference',
      'module' => 'entityreference',
      'entity_types' => array(),
      'foreign keys' => array(
        'node' => array(
          'table' => 'node',
          'columns' => array(
            'target_id' => 'nid',
          ),
        ),
      ),
      'indexes' => array(
        'target_entity' => array(
          '0' => 'target_id',
        ),
        'target_id' => array(
          '0' => 'target_id',
        ),
      ),
      'settings' => array(
        'handler_settings' => array(
          'target_bundles' => array('bir_view' => 'bir_view'),
        ),
        'handler_submit' => 'Change handler',
        'target_type' => 'node',
      ),
      'translatable' => 0,
    ),
    array(
      'field_name' => 'standard_image',
      'label' => $t('Standard Image'),
      'type' => 'entityreference',
      'module' => 'entityreference',
      'entity_types' => array(),
      'foreign keys' => array(
        'node' => array(
          'table' => 'node',
          'columns' => array(
            'target_id' => 'nid',
          ),
        ),
      ),
      'indexes' => array(
        'target_entity' => array(
          '0' => 'target_id',
        ),
        'target_id' => array(
          '0' => 'target_id',
        ),
      ),
      'settings' => array(
        'handler_settings' => array(
          'target_bundles' => array('bir_image' => 'bir_image'),
        ),
        'handler_submit' => 'Change handler',
        'target_type' => 'node',
      ),
      'translatable' => 0,
    ),
  );

  foreach ($entityreference_fields as $field) {
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }
  }

  $entityreference_instances = array(
    array(
      'field_name' => 'contributor',
      'entity_type' => 'node',
      'bundle' => 'bir_image',
      'label' => 'Contributor',
      'cardinality' => 1,
      'description' => $t('Select Contributor'),
      'widget' => array(
        'type' => 'options_select',
        'module' => 'options',
      ),
      'settings' => array(
        'target_type' => 'user',
        'handler_settings' => array('target_bundles' => array()),
      ),
    ),
    array(
      'field_name' => 'specimen_id',
      'entity_type' => 'node',
      'bundle' => 'bir_image',
      'label' => 'Specimen Id',
      'cardinality' => 1,
      'description' => $t('Select Specimen'),
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
      'settings' => array(
        'handler_settings' => array(
          'target_bundles' => array('bir_specimen' => 'bir_specimen'),
        ),
        'handler_submit' => 'Change handler',
        'target_type' => 'node',
      ),
    ),
    array(
      'field_name' => 'view_id',
      'entity_type' => 'node',
      'bundle' => 'bir_image',
      'label' => 'View Id',
      'cardinality' => 1,
      'description' => $t('View associated with image.'),
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
      'settings' => array(
        'handler_settings' => array(
          'target_bundles' => array('bir_view' => 'bir_view'),
        ),
        'handler_submit' => 'Change handler',
        'target_type' => 'node',
      ),
    ),
    array(
      'field_name' => 'standard_image',
      'entity_type' => 'node',
      'bundle' => 'bir_image',
      'label' => 'Standard Image',
      'cardinality' => 1,
      'description' => $t('Standard Image associated with object.'),
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
      'settings' => array(
        'handler_settings' => array(
          'target_bundles' => array('bir_image' => 'bir_image'),
        ),
        'handler_submit' => 'Change handler',
        'target_type' => 'node',
      ),
    ),
  );

  foreach ($entityreference_instances as $instance) {
    if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
  }

  return;
}

/**
 * Update for files.
 */
function bir_image_update_7103(&$sandbox) {

  $result = db_select('field_config_instance', 'f')
    ->fields('f')
    ->condition('field_name', 'field_image', '=')
    ->condition('entity_type', 'node', '=')
    ->condition('bundle', 'bir_image', '=')
    ->execute()
    ->fetchAssoc();

  $data = unserialize($result['data']);

  $data['widget'] = array(
    'type' => 'image_image',
    'settings' => array(
      'progress_indicator' => 'throbber',
      'preview_image_style' => 'thumbnail',
    ),
    'weight' => -1,
    'module' => 'image',
  );

  $data = serialize($data);

  db_update('field_config_instance')
    ->fields(array('data' => $data))
    ->condition('id', $result['id'], '=')
    ->execute();

  db_query("UPDATE drupal_file_managed SET uri = REPLACE( uri,  '000/001/',  '' )");

  return t('Please remove old directories in bir_image directory.');
}
