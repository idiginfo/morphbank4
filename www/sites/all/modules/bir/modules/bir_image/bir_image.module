<?php
/**
 * @file
 * BIR Image module functions.
 */

/**
 * Alter bir image node form.
 */
function bir_image_form_bir_image_node_form_alter(&$form, &$form_state, $form_id) {
  $form['eol'][LANGUAGE_NONE]['#default_value'] = array(0);
  unset($form['eol'][LANGUAGE_NONE]['#options']['_none']);
}

/**
 * Implements hook_node_insert.
 */
function bir_image_node_insert($node) {
  if ($node->type != 'bir_image') {
    return;
  }

  $image = new BirImage();
  $image->set_variables($node);
  $image->insert();

  return;
}

/**
 * Implements hook_node_update().
 */
function bir_image_node_update($node) {
  if ($node->type != 'bir_image') {
    return;
  }

  $image = new BirImage();
  $image->set_variables($node);
  $image->update();

  return;
}

/**
 * Implements hook_rest_server_response_formatters_alter().
 */

function bir_image_rest_server_response_formatters_alter(&$formatters) {
  $images = array(
    'thumb' => array(
      'mime types' => array('image/jpeg'),
      'formatter class' => 'ServicesThumbFormatter',
    ),
    'jpg' => array(
      'mime types' => array('image/jpeg'),
      'formatter class' => 'ServicesJpgFormatter',
    ),
    'jpeg' => array(
      'mime types' => array('image/jpeg'),
      'formatter class' => 'ServicesJpegFormatter',
    ),
    'tif' => array(
      'mime types' => array('image/tiff', 'image/x-tiff'),
      'formatter class' => 'ServicesTifFormatter',
    ),
    'tiff' => array(
      'mime types' => array('image/tiff', 'image/x-tiff'),
      'formatter class' => 'ServicesTifFormatter',
    ),
    'dng' => array(
      'mime types' => array('application/force-download'),
      'formatter class' => 'ServicesDngFormatter',
    ),
    'bmp' => array(
      'mime types' => array('image/bmp'),
      'formatter class' => 'ServicesBmpFormatter',
    ),
    'gif' => array(
      'mime types' => array('image/gif'),
      'formatter class' => 'ServicesGifFormatter',
    ),
    'png' => array(
      'mime types' => array('image/png'),
      'formatter class' => 'ServicesPngFormatter',
    ),
    'tpc' => array(
      'mime types' => array('application/octet-stream'),
      'formatter class' => 'ServicesTpcFormatter',
    ),
    'iip' => array(
      'mime types' => array('image/tiff', 'image/x-tiff'),
      'formatter class' => 'ServicesTifFormatter',
    ),
  );

  $formatters = array_merge($formatters, $images);

}

/**
 * Function to process images via process images batch.
 */
function bir_image_process_images($nids, $operation_details, &$context) {
  $context['message'] = $operation_details; //Will show what chunk we're on.

  $nodes = entity_load('node', $nids);
  foreach ($nodes as $node) {
    $nw = entity_metadata_wrapper('node', $node);
    $nid = $nw->getIdentifier();
    $fileName = $nw->original_image_source->value();
    $width = $nw->image_width->value();
    $height = $nw->image_height->value();
    $imageType = bir_image_set_type($nw->image_type->value());

    $data = array(
      'action' => 'process',
      'id' => $nid,
      'fileName' => $fileName,
      'imageType' => $imageType,
    );
    $full_url = url(variable_get('image_server_url'), array('query' => $data));
    $response = drupal_http_request($full_url);

    if ($response->code >= 400) {
      drush_print(dt('Error occured when processing !nid: !message ', array('!nid' => $nid, '!message' => $response->error)));
    }

    list($message, $w, $h) = explode('^', $response->data);

    if (empty($w) || empty($h)) {
      drush_print(dt('Error occured when processing !nid: !message ', array('!nid' => $nid, '!message' => $message)));
    }

    // Update node with new width and height information
    if ($width !== $w || $height !== $h) {
      $nw->image_width->set($w);
      $nw->image_height->set($h);

      // Update node fields.
      field_attach_update('node', $node);
    }
  }
}

/**
 * Function called when process images batch finished.
 */
function bir_image_process_images_finished($success, $results, $operations) {
  //Let the user know we have finished!
  print t('Finished processing!');
}

/**
 * Return file ext type based on mime.
 * Values of $type are set in the database via image upload or image import.
 */
function bir_image_set_type($type) {
  switch ($type) {
    case 'image/dng':
      $ext = 'dng';
      break;
    case 'image/tiff':
      $ext = 'tiff';
      break;
    case 'image/tif':
      $ext = 'tif';
      break;
    case 'image/png';
      $ext = 'png';
      break;
    case 'image/bmp':
      $ext = 'bmp';
      break;
    case 'image/gif':
      $ext = 'gif';
      break;
    default:
      $ext = 'jpg';
  }

  return $ext;
}